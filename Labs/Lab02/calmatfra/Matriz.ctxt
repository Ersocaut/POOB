#BlueJ class context
comment0.target=Matriz
comment0.text=\r\n\ @author\ ECI,\ 2019\r\n\r\n
comment1.params=elementos
comment1.target=boolean\ esMatriz(int[][][])
comment1.text=\r\n\ Nos\ dice\ si\ la\ matriz\ es\ considerada\ matriz\ algebraicamente\r\n\ @param\ elementos\ int[][][]\r\n
comment10.params=otra
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\ \r\n\ Compara\ esta\ matriz\ con\ otra\r\n\ @param\ otra\ objeto\ a\ comparar\r\n\ \r\n\ @return\ Booleano\ debera\ retornar\ un\ valor\ booleano\ si\ el\ objeto\ ingresado\ es\ igual\ a\ la\ matriz\ almacenada\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ \r\n\ Retorna\ una\ cadena\ con\ los\ datos\ de\ la\ matriz\ alineado\ a\ derecha\ por\ columna\r\n\ \r\n\ @return\ String\ debera\ retornar\ la\ cadena\ de\ la\ matriz\ en\ cada\ caso\r\n
comment12.params=
comment12.target=int\ getLengthColumn()
comment12.text=\r\n\ este\ metodo\ lo\ usamos\ para\ obtener\ el\ int\ LengthRow\r\n\ \r\n\ @return\ \ \ \ \ int\ el\ numero\ entero\ de\ la\ longitud\ de\ la\ fila\r\n
comment13.params=
comment13.target=int\ getLengthRow()
comment13.text=\r\n\ este\ metodo\ lo\ usamos\ para\ obtener\ el\ int\ LengthColumn\r\n\ \r\n\ @return\ \ \ \ \ int\ el\ numero\ entero\ de\ la\ longitud\ de\ la\ columna\r\n
comment14.params=m
comment14.target=Matriz\ sume(Matriz)
comment14.text=\ \r\n\ suma\ esta\ matriz\ con\ otra\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment15.params=m
comment15.target=Matriz\ reste(Matriz)
comment15.text=\ \r\n\ resta\ esta\ matriz\ con\ otra\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment16.params=m
comment16.target=Matriz\ multipliquePunto(Matriz)
comment16.text=\ \r\n\ multiplica\ esta\ matriz\ con\ otra\ punto\ a\ punto\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment17.params=m
comment17.target=Matriz\ multipliqueCruz(Matriz)
comment17.text=\ \r\n\ multiplica\ en\ cruz\ esta\ matriz\ con\ otra\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment18.params=m
comment18.target=Matriz\ division(Matriz)
comment18.text=\ \r\n\ divide\ esta\ matriz\ con\ otra\ punto\ a\ punto\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment19.params=
comment19.target=Matriz\ traspuesta()
comment19.text=\ \r\n\ divide\ esta\ matriz\ con\ otra\ punto\ a\ punto\r\n\ @param\ m\ matriz\ \r\n\ \r\n\ @return\ Matriz\ debera\ retornar\ una\ Matriz\ nueva\ la\ cual\ contenga\ los\ fraccionarios\ resultantes\ de\ la\ operacion\r\n
comment2.params=elementos
comment2.target=Matriz(int[][][])
comment2.text=\r\n\ Retorna\ una\ matriz\ dados\ sus\ elementos.\ Los\ fraccionarios\ se\ representan\ como\ {numerador,\ denominador}\r\n\ @param\ elemento\ [][][]int\ es\ una\ lista\ de\ matrices\ de\ las\ cuales\ se\ convertiran\ en\ matriz\ de\ fraccionarios\r\n
comment3.params=elementos
comment3.target=Matriz(Fraccionario[][])
comment3.text=\r\n\ Retorna\ una\ matriz\ dados\ sus\ elementos.\ \r\n\ @param\ elementos\ Fraccionario[][]\ se\ le\ asignaran\ los\ elemenos\ a\ la\ matriz\r\n
comment4.params=d
comment4.target=Matriz(Fraccionario[])
comment4.text=\r\n\ Retorna\ una\ matriz\ dada\ su\ diagonal.\ \r\n\ @param\ d\ Fraccionario[]\ es\ una\ lista\ de\ fraccionarios\ en\ donde\ segun\ su\ diagonal\ guardare\ los\ datos\ \ \r\n
comment5.params=e\ f\ c
comment5.target=Matriz(Fraccionario,\ int,\ int)
comment5.text=\r\n\ Retorna\ una\ matriz\ de\ un\ numero\ repetido\ dada\ su\ dimension.\ \r\n\ @param\ e\ Fraccionario\ que\ se\ va\ a\ almacenar\ en\ matriz\r\n\ @param\ f\ int\ fila\r\n\ @param\ c\ int\ columna\r\n
comment6.params=n
comment6.target=Matriz(int)
comment6.text=\r\n\ Retorna\ una\ matriz\ identidad\ dada\ su\ dimension.\ \r\n\ @param\ n\ int\ dimension\ de\ la\ matriz\ identidad\ a\ crear\r\n
comment7.params=
comment7.target=Matriz\ dimension()
comment7.text=\r\n\ Retorna\ una\ matriz\ identidad\ dada\ su\ dimension.\ \r\n\ @return\ \ \ \ \ Matriz\ se\ guarda\ el\ valor\ de\ la\ fila\ y\ la\ columna\ de\ la\ matriz\r\n
comment8.params=f\ c
comment8.target=Fraccionario\ get(int,\ int)
comment8.text=\r\n\ este\ metodo\ lo\ usamos\ para\ obtener\ el\ Fraccionario\ ubicado\ en\ la\ fila\ y\ columna\ que\ no\ dan\r\n\ @param\ f\ int\ numero\ de\ la\ fila\r\n\ @param\ c\ int\ numero\ de\ la\ columna\r\n\ \r\n\ @return\ \ \ \ \ Fraccionario\ el\ Fraccionario\ ubicado\ en\ la\ fila\ y\ columna\ de\ la\ matriz\ que\ desea\ averiguar\r\n
comment9.params=otra
comment9.target=boolean\ equals(Matriz)
comment9.text=\r\n\ Compara\ esta\ matriz\ con\ otra\r\n\ @param\ otra\ Matriz\ a\ comparar\r\n\ \r\n\ @return\ Booleano\ debera\ retornar\ un\ valor\ booleano\ si\ \ la\ Matriz\ ingresada\ es\ igual\ a\ la\ matriz\ almacenada\ \r\n
numComments=20
